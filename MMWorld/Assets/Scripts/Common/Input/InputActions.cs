//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Scripts/Common/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""507e2c02-a9c0-4d1b-861a-0e6a587e1ab2"",
            ""actions"": [
                {
                    ""name"": ""GPMove"",
                    ""type"": ""Value"",
                    ""id"": ""1607344e-7e47-4467-8f40-e04dd8eeb834"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KBJump"",
                    ""type"": ""Button"",
                    ""id"": ""6c75bae8-78cb-4acd-a3b6-849234da95c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GPJump"",
                    ""type"": ""Button"",
                    ""id"": ""d6b57cf1-1e2b-4137-98d6-6b9693438214"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KBMoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""27fab92a-8628-4f34-9906-eec044dd1457"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KBMoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""6ba63b58-43c7-4789-b54a-16f7656e8124"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KBMoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e4dfc055-c6b6-401d-b17d-b2ece04169ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KBMoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""ad575227-2396-4453-992a-01754bbe18ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ea5c91e-5947-4f8f-a655-1932135e3997"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GPMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d674a16-2339-4159-bbba-f1053c9a1fe5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KBJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2634356-d91e-4e54-865e-2eaf07a5bc7b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KBMoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ccd6108-4470-48fe-97f7-7038e6e3e22d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KBMoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45673560-291e-4f77-8b8b-f3653496228a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KBMoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a85b28b0-1675-4234-860e-934477c982e9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KBMoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62a58b75-4edf-4a40-a4d3-dbe52b7f6748"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GPJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d40b593-125f-461e-81e3-e56311667d01"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KBMoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""844a5f6d-ccd8-4b0d-bbef-62726ac52ad9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KBMoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0dbbb88-ee94-4b41-8599-d33d0f5c443b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KBMoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8288eb3c-39b0-40b9-a124-12dbd9209bcb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KBMoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_GPMove = m_Player.FindAction("GPMove", throwIfNotFound: true);
        m_Player_KBJump = m_Player.FindAction("KBJump", throwIfNotFound: true);
        m_Player_GPJump = m_Player.FindAction("GPJump", throwIfNotFound: true);
        m_Player_KBMoveUp = m_Player.FindAction("KBMoveUp", throwIfNotFound: true);
        m_Player_KBMoveDown = m_Player.FindAction("KBMoveDown", throwIfNotFound: true);
        m_Player_KBMoveLeft = m_Player.FindAction("KBMoveLeft", throwIfNotFound: true);
        m_Player_KBMoveRight = m_Player.FindAction("KBMoveRight", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputActions.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_GPMove;
    private readonly InputAction m_Player_KBJump;
    private readonly InputAction m_Player_GPJump;
    private readonly InputAction m_Player_KBMoveUp;
    private readonly InputAction m_Player_KBMoveDown;
    private readonly InputAction m_Player_KBMoveLeft;
    private readonly InputAction m_Player_KBMoveRight;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @GPMove => m_Wrapper.m_Player_GPMove;
        public InputAction @KBJump => m_Wrapper.m_Player_KBJump;
        public InputAction @GPJump => m_Wrapper.m_Player_GPJump;
        public InputAction @KBMoveUp => m_Wrapper.m_Player_KBMoveUp;
        public InputAction @KBMoveDown => m_Wrapper.m_Player_KBMoveDown;
        public InputAction @KBMoveLeft => m_Wrapper.m_Player_KBMoveLeft;
        public InputAction @KBMoveRight => m_Wrapper.m_Player_KBMoveRight;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @GPMove.started += instance.OnGPMove;
            @GPMove.performed += instance.OnGPMove;
            @GPMove.canceled += instance.OnGPMove;
            @KBJump.started += instance.OnKBJump;
            @KBJump.performed += instance.OnKBJump;
            @KBJump.canceled += instance.OnKBJump;
            @GPJump.started += instance.OnGPJump;
            @GPJump.performed += instance.OnGPJump;
            @GPJump.canceled += instance.OnGPJump;
            @KBMoveUp.started += instance.OnKBMoveUp;
            @KBMoveUp.performed += instance.OnKBMoveUp;
            @KBMoveUp.canceled += instance.OnKBMoveUp;
            @KBMoveDown.started += instance.OnKBMoveDown;
            @KBMoveDown.performed += instance.OnKBMoveDown;
            @KBMoveDown.canceled += instance.OnKBMoveDown;
            @KBMoveLeft.started += instance.OnKBMoveLeft;
            @KBMoveLeft.performed += instance.OnKBMoveLeft;
            @KBMoveLeft.canceled += instance.OnKBMoveLeft;
            @KBMoveRight.started += instance.OnKBMoveRight;
            @KBMoveRight.performed += instance.OnKBMoveRight;
            @KBMoveRight.canceled += instance.OnKBMoveRight;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @GPMove.started -= instance.OnGPMove;
            @GPMove.performed -= instance.OnGPMove;
            @GPMove.canceled -= instance.OnGPMove;
            @KBJump.started -= instance.OnKBJump;
            @KBJump.performed -= instance.OnKBJump;
            @KBJump.canceled -= instance.OnKBJump;
            @GPJump.started -= instance.OnGPJump;
            @GPJump.performed -= instance.OnGPJump;
            @GPJump.canceled -= instance.OnGPJump;
            @KBMoveUp.started -= instance.OnKBMoveUp;
            @KBMoveUp.performed -= instance.OnKBMoveUp;
            @KBMoveUp.canceled -= instance.OnKBMoveUp;
            @KBMoveDown.started -= instance.OnKBMoveDown;
            @KBMoveDown.performed -= instance.OnKBMoveDown;
            @KBMoveDown.canceled -= instance.OnKBMoveDown;
            @KBMoveLeft.started -= instance.OnKBMoveLeft;
            @KBMoveLeft.performed -= instance.OnKBMoveLeft;
            @KBMoveLeft.canceled -= instance.OnKBMoveLeft;
            @KBMoveRight.started -= instance.OnKBMoveRight;
            @KBMoveRight.performed -= instance.OnKBMoveRight;
            @KBMoveRight.canceled -= instance.OnKBMoveRight;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnGPMove(InputAction.CallbackContext context);
        void OnKBJump(InputAction.CallbackContext context);
        void OnGPJump(InputAction.CallbackContext context);
        void OnKBMoveUp(InputAction.CallbackContext context);
        void OnKBMoveDown(InputAction.CallbackContext context);
        void OnKBMoveLeft(InputAction.CallbackContext context);
        void OnKBMoveRight(InputAction.CallbackContext context);
    }
}
